4. Create two methods (in a JsonConverter Class) that will convert data into JSON
format:

Feature 7 - Convert List of Entities to a JSON String
e.g. String playersListToJsonString( List<Player> list )

Feature 8 – Convert a single Entity by Key into a JSON String
e.g. String playerToJsonString( Player p )

5. Test your features by creating a number of meaningful JUnit tests. (These tests
form part of your submission)

Client-Server Features

The following features will allow you to integrate the components that you have
completed previously with the client-server material that has been provided in
class. Your Data Access Layer (DAOs) will reside on the server, and your Menu/GUI
will reside on the client.
It is recommended that you implement the client with a GUI, using JavaFX. A well
written console application is also acceptable, but you will not be eligible for full
marks (refer to the grading rubric for ‘Excellent’ and ‘Exceptional’ grading criteria.)
The best approach may be to implement a console based interface initially and
afterwards add the GUI.


Feature 9 - “Display Entity by Id”
Implement a client-side menu item that allows a user to select the option “Display
Entity by ID” where the Entity is your selected entity class (e.g. Display Player by ID).
The client will send a request (command) to the server, along with the user inputted
identifier (ID), in accordance with your specified protocol. The server will process
the request, extract the ID, and call an appropriate DAO method (on server side) to
retrieve the entity by ID from the database and instantiate a Player object. The
Player object will then be serialized into JSON representation, and sent from server
to client via a socket stream. The client will receive the JSON data, parse the data
and instantiate and populate an entity object with the data. The data will then be
retrieved from the entity object and displayed on the client screen in a neatly
formatted manner.


Feature 10 - “Display all Entities”
Implement a client-side menu option “Display all Entities” that will send a request to
the server to obtain a list of all entities. The server will process the request
(command) and will use a DAO method to retrieve a list of entities. This list will be
passed to a method that will convert it to JSON format (array of json objects), and
return it as a JSON String. The JSON String will be sent from server to client via a
socket. The client will parse the received JSON data and use it to populate a List of
entities. All entities will be displayed and neatly formatted from the list of entity
objects. Parsing of JSON must be done using the org.json library.